generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  ADMIN
}

model Address {
  id              Int     @id @default(autoincrement()) @map("address_id")
  street          String
  houseNumber     String  @map("house_number")
  apartmentNumber String? @map("apartment_number")
  postalCode      String  @map("postal_code")
  city            String
  country         String  @default("Poland")
  isDefault       Boolean @default(false) @map("is_default")
  userId          Int     @map("user_id")
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders          Order[] @relation("DeliveryAddress") // Relation name for clarity

  @@map("addresses")
}

model Author {
  id          Int     @id @default(autoincrement()) @map("author_id")
  firstName   String?
  lastName    String
  description String?
  books       Book[]  @relation("BookAuthor")

  @@map("authors")
}

model Genre {
  id          Int     @id @default(autoincrement()) @map("genre_id")
  name        String  @unique @map("name") // Simplified map
  description String?
  books       Book[]  @relation("BookGenre")

  @@map("genres")
}

model Book {
  id                   Int             @id @default(autoincrement()) @map("book_id")
  title                String
  publicationYear      Int?            @map("publication_year")
  price                Decimal
  conditionDescription String          @map("condition_description")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime?       @updatedAt @map("updated_at")
  bookStatusId         Int             @map("book_status_id")
  bookStatus           BookStatus      @relation(fields: [bookStatusId], references: [id], onDelete: Restrict)
  authors              Author[]        @relation("BookAuthor")
  genres               Genre[]         @relation("BookGenre")
  images               BookImage[]
  reservations         Reservation[]
  orderItems           OrderItem[]
  relatedSubmission    BookSubmission? @relation("BookFromSubmission")

  @@map("books")
}

model DeliveryMethod {
  id                    Int     @id @default(autoincrement()) @map("delivery_method_id")
  name                  String
  cost                  Decimal
  estimatedDeliveryTime String? @map("estimated_delivery_time")
  isActive              Boolean @default(true) @map("is_active")
  orders                Order[]

  @@map("delivery_methods")
}

model PaymentMethod {
  id          Int       @id @default(autoincrement()) @map("payment_method_id")
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  payments    Payment[]

  @@map("payment_methods")
}

model Payment {
  id                    Int             @id @default(autoincrement()) @map("payment_id")
  amount                Decimal
  paymentDate           DateTime?       @map("payment_date")
  paymentStatus         PaymentStatusEnum @map("payment_status")
  externalTransactionId String?         @map("external_transaction_id")
  orderId               Int             @map("order_id")
  paymentMethodId       Int             @map("payment_method_id")
  order                 Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentMethod         PaymentMethod   @relation(fields: [paymentMethodId], references: [id], onDelete: Restrict)

  @@map("payments")
}

enum PaymentStatusEnum {
  Pending
  Successful
  Failed
  Cancelled
  Refunded
  @@map("payment_status_enum")
}

model OrderItem {
  id        Int     @id @default(autoincrement()) @map("order_item_id")
  quantity  Int     @default(1)
  unitPrice Decimal @map("unit_price")
  orderId   Int     @map("order_id")
  bookId    Int     @map("book_id")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book      Book    @relation(fields: [bookId], references: [id], onDelete: Restrict)

  @@unique([orderId, bookId], map: "order_items_uniq_order_book")
  @@map("order_items")
}

model Reservation {
  id                Int                   @id @default(autoincrement()) @map("reservation_id")
  startDate         DateTime              @map("start_date")
  endDate           DateTime              @map("end_date")
  reservationStatus ReservationStatusEnum @default(Active) @map("reservation_status")
  cancellationDate  DateTime?             @map("cancellation_date")
  userId            Int                   @map("user_id")
  bookId            Int                   @map("book_id")
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  book              Book                  @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

enum ReservationStatusEnum {
  Active
  Cancelled
  Completed
  @@map("reservation_status_enum")
}

model BookStatus {
  id    Int    @id @default(autoincrement()) @map("book_status_id")
  name  String @unique @map("name") // Simplified map
  books Book[]

  @@map("book_statuses")
}

model OrderStatus {
  id          Int     @id @default(autoincrement()) @map("order_status_id")
  name        String  @unique @map("name") // Simplified map
  description String?
  orders      Order[]

  @@map("order_statuses")
}

model User {
  id                 Int              @id @default(autoincrement()) @map("user_id")
  email              String           @unique @map("email") // Simplified map
  passwordHash       String           @map("password_hash")
  firstName          String?
  lastName           String?
  createdAt          DateTime         @default(now()) @map("created_at")
  isActive           Boolean          @default(true) @map("is_active")
  passwordResetToken String?          @map("password_reset_token")
  tokenExpiryDate    DateTime?        @map("token_expiry_date")
  role               Role             @default(USER) // Added Role enum field
  addresses          Address[]
  orders             Order[]
  reservations       Reservation[]
  submissions        BookSubmission[] @relation("UserSubmissions")
  reviewedSubmissions BookSubmission[] @relation("AdminReviewedSubmissions")

  @@map("users")
}

model Order {
  id                Int            @id @default(autoincrement()) @map("order_id")
  orderNumber       String         @unique @map("order_number")
  createdAt         DateTime       @default(now()) @map("created_at")
  shippedDate       DateTime?      @map("shipped_date")
  totalValue        Decimal        @map("total_value")
  deliveryCost      Decimal        @map("delivery_cost")
  customerNotes     String?        @map("customer_notes")
  userId            Int            @map("user_id")
  deliveryAddressId Int            @map("delivery_address_id")
  deliveryMethodId  Int            @map("delivery_method_id")
  orderStatusId     Int            @map("order_status_id")
  user              User           @relation(fields: [userId], references: [id], onDelete: Restrict)
  deliveryAddress   Address        @relation("DeliveryAddress", fields: [deliveryAddressId], references: [id], onDelete: Restrict)
  deliveryMethod    DeliveryMethod @relation(fields: [deliveryMethodId], references: [id], onDelete: Restrict)
  orderStatus       OrderStatus    @relation(fields: [orderStatusId], references: [id], onDelete: Restrict)
  orderItems        OrderItem[]
  payments          Payment[]

  @@map("orders")
}

model BookImage {
  id             Int     @id @default(autoincrement()) @map("book_image_id")
  url            String
  altDescription String? @map("alt_description")
  isMain         Boolean @default(false) @map("is_main")
  bookId         Int     @map("book_id")
  book           Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_images")
}

model BookSubmission {
  id                   Int                  @id @default(autoincrement()) @map("submission_id")
  authorText           String               @map("author_text")
  titleText            String               @map("title_text")
  conditionDescription String               @map("condition_description")
  additionalInfo       String?              @map("additional_info")
  createdAt            DateTime             @default(now()) @map("created_at")
  submissionStatus     SubmissionStatusEnum @default(New) @map("submission_status")
  adminDecisionNotes   String?              @map("admin_decision_notes")
  decisionDate         DateTime?            @map("decision_date")
  submittedById        Int                  @map("submitted_by_id")
  reviewedById         Int?                 @map("reviewed_by_id")
  createdBookId        Int?                 @unique @map("created_book_id")
  submittedBy          User                 @relation("UserSubmissions", fields: [submittedById], references: [id], onDelete: Cascade)
  reviewedBy           User?                @relation("AdminReviewedSubmissions", fields: [reviewedById], references: [id], onDelete: SetNull)
  createdBook          Book?                @relation("BookFromSubmission", fields: [createdBookId], references: [id], onDelete: SetNull)

  @@map("book_submissions")
}

enum SubmissionStatusEnum {
  New
  UnderReview @map("Under Review")
  Accepted
  Rejected
  @@map("submission_status_enum")
}
// highlight-start
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Adres {
  id              Int       @id @default(autoincrement()) @map("ID_Adresu")
  ulica           String
  numerDomu       String    @map("Numer_Domu")
  numerMieszkania String?   @map("Numer_Mieszkania")
  kodPocztowy     String    @map("Kod_Pocztowy")
  miasto          String
  kraj            String    @default("Polska")
  czyDomyslny     Boolean   @default(false) @map("Czy_Domyslny")
  uzytkownikId    Int       @map("ID_Uzytkownika")
  uzytkownik      user      @relation(fields: [uzytkownikId], references: [id], onDelete: Cascade) 
  zamowienia      Zamowienie[]

  @@map("Adresy")
}

model Autor {
  id       Int      @id @default(autoincrement()) @map("ID_Autora")
  imie     String?
  nazwisko String
  opis     String?
  ksiazki  Ksiazka[] @relation("KsiazkaAutor")

  @@map("Autorzy")
}

model Gatunek {
  id      Int      @id @default(autoincrement()) @map("ID_Gatunku")
  nazwa   String   @unique(map: "Gatunki_Nazwa_UN")
  opis    String?
  ksiazki Ksiazka[] @relation("KsiazkaGatunek")

  @@map("Gatunki")
}

model Ksiazka {
  id                 Int            @id @default(autoincrement()) @map("ID_Ksiazki")
  tytul              String
  rokWydania         Int?           @map("Rok_Wydania")
  cena               Decimal
  opisStanu          String         @map("Opis_Stanu")
  dataDodania        DateTime       @default(now()) @map("Data_Dodania")
  dataModyfikacji    DateTime?      @updatedAt @map("Data_Modyfikacji")
  statusKsiazkiId    Int            @map("ID_Statusu_Ksiazki")
  statusKsiazki      StatusKsiazki  @relation(fields: [statusKsiazkiId], references: [id], onDelete: Restrict) 
  autorzy            Autor[]        @relation("KsiazkaAutor")
  gatunki            Gatunek[]      @relation("KsiazkaGatunek")
  zdjecia            ZdjecieKsiazki[]
  rezerwacje         Rezerwacja[]
  pozycjeZamowien    PozycjaZamowienia[]
  zgloszeniePowiazane ZgloszenieKsiazki? @relation("KsiazkaZeZgloszenia")

  @@map("Ksiazki")
}

model MetodaDostawy {
  id                      Int      @id @default(autoincrement()) @map("ID_Metody_Dostawy")
  nazwa                   String
  koszt                   Decimal
  przewidywanyCzasDostawy String?  @map("Przewidywany_Czas_Dostawy")
  czyAktywna              Boolean  @default(true) @map("Czy_Aktywna")
  zamowienia              Zamowienie[]

  @@map("MetodyDostawy")
}

model MetodaPlatnosci {
  id          Int      @id @default(autoincrement()) @map("ID_Metody_Platnosci")
  nazwa       String
  opis        String?
  czyAktywna  Boolean  @default(true) @map("Czy_Aktywna")
  platnosci   Platnosc[]

  @@map("MetodyPlatnosci")
}

model Platnosc {
  id                Int            @id @default(autoincrement()) @map("ID_Platnosci")
  kwota             Decimal
  dataPlatnosci     DateTime?      @map("Data_Platnosci")
  statusPlatnosci   StatusPlatnosciEnum @map("Status_Platnosci")
  idTransakcjiZewn  String?        @map("Id_Transakcji_Zewn")
  zamowienieId      Int            @map("ID_Zamowienia")
  metodaPlatnosciId Int            @map("ID_Metody_Platnosci")
  zamowienie        Zamowienie     @relation(fields: [zamowienieId], references: [id], onDelete: Cascade) 
  metodaPlatnosci   MetodaPlatnosci @relation(fields: [metodaPlatnosciId], references: [id], onDelete: Restrict) 

  @@map("Platnosci")
}

enum StatusPlatnosciEnum {
  Oczekujaca
  Udana
  Nieudana
  Anulowana
  Zwrocona
  @@map("status_platnosci_enum")
}

model PozycjaZamowienia {
  id                Int       @id @default(autoincrement()) @map("ID_Pozycji_Zamowienia")
  ilosc             Int       @default(1)
  cenaJednostkowa   Decimal   @map("Cena_Jednostkowa")
  zamowienieId      Int       @map("ID_Zamowienia")
  ksiazkaId         Int       @map("ID_Ksiazki")
  zamowienie        Zamowienie @relation(fields: [zamowienieId], references: [id], onDelete: Cascade) 
  ksiazka           Ksiazka    @relation(fields: [ksiazkaId], references: [id], onDelete: Restrict) 

  @@unique([zamowienieId, ksiazkaId], map: "PozZam_Uniq_Zam_Ksiazka")
  @@map("PozycjeZamowien")
}

model Rezerwacja {
  id                Int       @id @default(autoincrement()) @map("ID_Rezerwacji")
  dataRozpoczecia   DateTime  @map("Data_Rozpoczecia")
  dataZakonczenia   DateTime  @map("Data_Zakonczenia")
  statusRezerwacji  StatusRezerwacjiEnum @default(Aktywna) @map("Status_Rezerwacji")
  dataAnulowania    DateTime? @map("Data_Anulowania")
  uzytkownikId      Int       @map("ID_Uzytkownika")
  ksiazkaId         Int       @map("ID_Ksiazki")
  uzytkownik        user      @relation(fields: [uzytkownikId], references: [id], onDelete: Cascade) 
  ksiazka           Ksiazka    @relation(fields: [ksiazkaId], references: [id], onDelete: Cascade) 

  @@map("Rezerwacje")
}

enum StatusRezerwacjiEnum {
  Aktywna
  Anulowana
  Zakonczona
  @@map("status_rezerwacji_enum")
}

model StatusKsiazki {
  id    Int      @id @default(autoincrement()) @map("ID_Statusu_Ksiazki")
  nazwa String   @unique(map: "StatusyKsiazek_Nazwa_UN")
  ksiazki Ksiazka[]

  @@map("StatusyKsiazek")
}

model StatusZamowienia {
  id         Int      @id @default(autoincrement()) @map("ID_Statusu_Zamowienia")
  nazwa      String   @unique(map: "StatusyZamowien_Nazwa_UN")
  opis       String?
  zamowienia Zamowienie[]

  @@map("StatusyZamowien")
}

model user {
  id                Int       @id @default(autoincrement()) @map("ID_Uzytkownika")
  email             String    @unique(map: "Uzytkownicy_Email_UN")
  nazwisko          String?
  name              String?   // Rozważ czy potrzebne obok nazwiska (i ew. imienia)
  password          String?   // Przechowuje jawne hasło - BARDZO NIEBEZPIECZNE!
  createdAt         DateTime   @default(now()) @map("Data_Rejestracji") // Pełni rolę daty rejestracji
  updatedAt         DateTime   @updatedAt 
  czyAktywny        Boolean   @default(true) @map("Czy_Aktywny")
  tokenResetHasla   String?   @map("Token_Reset_Hasla")
  dataWaznTokenu    DateTime? @map("Data_Wazn_Tokenu")
  adresy            Adres[]
  role              Role @default(USER)
  zamowienia        Zamowienie[]
  rezerwacje        Rezerwacja[]
  zgloszenia        ZgloszenieKsiazki[] @relation("ZgloszeniaZglaszajacego")
  ocenioneZgloszenia ZgloszenieKsiazki[] @relation("ZgloszeniaOcenione")
  @@map("Uzytkownicy")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Zamowienie {
  id                 Int             @id @default(autoincrement()) @map("ID_Zamowienia")
  numerZamowienia    String          @unique(map: "Zamowienia_Numer_UN") @map("Numer_Zamowienia")
  dataZlozenia       DateTime        @default(now()) @map("Data_Zlozenia")
  dataWyslania       DateTime?       @map("Data_Wyslania")
  lacznaWartosc      Decimal         @map("Laczna_Wartosc")
  kosztDostawy       Decimal         @map("Koszt_Dostawy")
  uwagiKlienta       String?         @map("Uwagi_Klienta")
  uzytkownikId       Int             @map("ID_Uzytkownika")
  adresDostawyId     Int             @map("ID_Adresu_Dostawy")
  metodaDostawyId    Int             @map("ID_Metody_Dostawy")
  statusZamowieniaId Int             @map("ID_Statusu_Zamowienia")
  uzytkownik         user            @relation(fields: [uzytkownikId], references: [id], onDelete: Restrict) 
  adresDostawy       Adres           @relation(fields: [adresDostawyId], references: [id], onDelete: Restrict) 
  metodaDostawy      MetodaDostawy   @relation(fields: [metodaDostawyId], references: [id], onDelete: Restrict) 
  statusZamowienia   StatusZamowienia @relation(fields: [statusZamowieniaId], references: [id], onDelete: Restrict) 
  pozycje            PozycjaZamowienia[]
  platnosci          Platnosc[]

  @@map("Zamowienia")
}

model ZdjecieKsiazki {
  id        Int     @id @default(autoincrement()) @map("ID_Zdjecia")
  url       String
  opisAlt   String? @map("Opis_Alt")
  czyGlowne Boolean @default(false) @map("Czy_Glowne")
  ksiazkaId Int     @map("ID_Ksiazki")
  ksiazka   Ksiazka @relation(fields: [ksiazkaId], references: [id], onDelete: Cascade) 

  @@map("ZdjeciaKsiazek")
}

model ZgloszenieKsiazki {
  id                       Int       @id @default(autoincrement()) @map("ID_Zgloszenia")
  autorTekst               String    @map("Autor_Tekst")
  tytulTekst               String    @map("Tytul_Tekst")
  stanOpis                 String    @map("Stan_Opis")
  opisDodatkowy            String?   @map("Opis_Dodatkowy")
  dataZgloszenia           DateTime  @default(now()) @map("Data_Zgloszenia")
  statusZgloszenia         StatusZgloszeniaEnum @default(Nowe) @map("Status_Zgloszenia")
  decyzjaAdminaOpis        String?   @map("Decyzja_Admina_Opis")
  dataDecyzji              DateTime? @map("Data_Decyzji")
  uzytkownikZglaszajacyId  Int       @map("ID_Uzytkownika_Zglaszajacego")
  adminOceniajacyId        Int?      @map("ID_Admina_Oceniajacego")
  ksiazkaPoDodaniuId       Int?      @unique(map: "ZgloszKs_Ksiazka_UN") @map("ID_Ksiazki_Po_Dodaniu")
  uzytkownikZglaszajacy    user      @relation("ZgloszeniaZglaszajacego", fields: [uzytkownikZglaszajacyId], references: [id], onDelete: Cascade) 
  adminOceniajacy          user?     @relation("ZgloszeniaOcenione", fields: [adminOceniajacyId], references: [id], onDelete: SetNull) 
  ksiazkaPoDodaniu         Ksiazka?   @relation("KsiazkaZeZgloszenia", fields: [ksiazkaPoDodaniuId], references: [id], onDelete: SetNull) 

  @@map("ZgloszeniaKsiazek")
}

enum StatusZgloszeniaEnum {
  Nowe
  W_ocenie @map("W ocenie")
  Zaakceptowane
  Odrzucone
  @@map("status_zgloszenia_enum")
}